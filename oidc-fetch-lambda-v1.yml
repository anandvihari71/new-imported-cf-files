AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Custom Resource to fetch EKS OIDC Provider ID

Parameters:
  ClusterName:
    Type: String
  Region:
    Type: String

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  OIDCLookupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub FetchOIDC-${ClusterName}
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json

          def handler(event, context):
              cluster_name = event['ResourceProperties']['ClusterName']
              region = event['ResourceProperties']['Region']
              eks = boto3.client('eks', region_name=region)
              cluster = eks.describe_cluster(name=cluster_name)
              oidc_url = cluster['cluster']['identity']['oidc']['issuer']
              oidc_id = oidc_url.split('/')[-1]
              return {
                  'PhysicalResourceId': cluster_name,
                  'Data': {
                      'OIDCProviderId': oidc_id,
                      'OIDCURL': oidc_url
                  }
              }

  FetchOIDCCustomResource:
    Type: Custom::OIDCProvider
    Properties:
      ServiceToken: !GetAtt OIDCLookupFunction.Arn
      ClusterName: !Ref ClusterName
      Region: !Ref Region

Outputs:
  OIDCProviderId:
    Value: !GetAtt FetchOIDCCustomResource.OIDCProviderId
    Export:
      Name: FetchOIDCStack-OIDCProviderId

  OIDCURL:
    Value: !GetAtt FetchOIDCCustomResource.OIDCURL
    Export:
      Name: FetchOIDCStack-OIDCURL
